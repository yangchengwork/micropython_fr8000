
#ifndef BLE_STACK_H_
#define BLE_STACK_H_

#include <stdint.h>
#include <stdbool.h>

enum ble_addr_type
{
    BLE_ADDR_TYPE_PUBLIC,                    //addr is set by user,value is fixed forever
    BLE_ADDR_TYPE_PRIVATE,                   //addr is set by user,value is fixed after device is power on
    BLE_ADDR_TYPE_RANDOM_RESOVABLE,          //addr is generated by stack with IRK
    BLE_ADDR_TYPE_RANDOM_NONE_RESOVABLE,     //addr is generated by stack,value is randomly
};

enum ble_coded_phy_sel_t
{
    BLE_CODED_PHY_SEL_125K,
    BLE_CODED_PHY_SEL_500K,
};

/*********************************************************************
 * @fn      ble_stack_init
 *
 * @brief   used to initialize BLE stack.
 *
 * @param   None.
 *
 * @return  None.
 */
void ble_stack_init(void);

/*********************************************************************
 * @fn      ble_stack_schedule
 *
 * @brief   A non-preemptive OS is used to schedule events generated and consumed 
 *          inside this BLE stack. Call this function continuously to schedule these
 *          events.
 *
 * @param   None.
 *
 * @return  None.
 */
void ble_stack_schedule(void);

/*********************************************************************
 * @fn      ble_stack_schedule_allow
 *
 * @brief   ble_stack_schedule is disallowed under certain circumstances, such as wake up
 *          procedure is on-going. call this function to check this conditions.
 *
 * @param   None.
 *
 * @return  true-ble_stack_schedule is allowd to be called.
 */
bool ble_stack_schedule_allow(void);

/*********************************************************************
 * @fn      ble_stack_sleep_check
 *
 * @brief   check if there are any events that need to be done in the near future, these
 *          task maybe BLE schedule, os_timer, messages, etc. If none of these events exist, this
 *          function will return non-zero value, and the system is allowed to enter sleep mode.
 *
 * @param   None.
 *
 * @return  non-zero means enter sleep is allowed.
 */
uint8_t ble_stack_sleep_check(void);

/*********************************************************************
 * @fn      ble_stack_enter_sleep
 *
 * @brief   call this function to enter deep sleep mode.
 *
 * @param   None.
 *
 * @return  None.
 */
void ble_stack_enter_sleep(void);

/*********************************************************************
 * @fn      ble_stack_schedule_backward
 *
 * @brief   Used to do system recover after wakeup from deep sleep mode.
 *
 * @param   None.
 *
 * @return  None.
 */
void ble_stack_schedule_backward(void);

/*********************************************************************
 * @fn      ble_stack_rf_init
 *
 * @brief   used to initialize rf when power on or wake up from deep sleep mode.
 *
 * @param   None.
 *
 * @return  None.
 */
void ble_stack_rf_init(void);

/*********************************************************************
 * @fn      ble_stack_set_sleep_dur
 *
 * @brief   used to configure ble stack sleep duration, this function is useful
 *          when porting RTOS.
 *
 * @param   sleep_duration  - system sleep durition, unit: low power clock period.
 *
 * @return  None.
 */
void ble_stack_set_sleep_dur(uint32_t sleep_duration);

/*********************************************************************
 * @fn      ble_stack_sleep_time_calc
 *
 * @brief   used to calculate how many maximum low power cycles should system stay in sleep mode,
 *          this function is useful when porting RTOS.
 *
 * @param   max_duration    - as input this value represents the maximum sleep duration currently,
 *                            this value should be updated inside this function according to BLE
 *                            schedule, os_timer, etc.
 *
 * @return  whether enter sleep mode is allowed based on BLE schedule, os_timer, etc.
 *          0: reject; 1:allow
 */
uint8_t ble_stack_sleep_time_calc(int32_t *max_duration);

/*********************************************************************
 * @fn      ble_stack_configure
 *
 * @brief   used to configure ble stack, this funcion should be called before stack initialization.
 *
 * @param   sig_mesh_en     - reserve resource for sig mesh or not.
 *          con_num         - maximum number of links supported
 *          rx_buf_num      - maximum number of rx buffer supported in link layer
 *          rx_buf_size     - maximum size of rx buffer supported in link layer. this value should be set
 *                            to 251 if extended scan is used, otherwise this value should be set from 37 to 251
 *          tx_buf_num      - maximum number of tx buffer supported in link layer
 *          tx_buf_size     - maximum size of tx buffer supported in link layer. this value should be set 
 *                            from 37 to 251.
 *          max_adv_size    - maximum size of adv buffer supported in link layer. This value should be set
 *                            to 31 if extended adv is not used, otherwise this value should be set from 
 *                            maximum length of adv data to 251.
 *          ret_ram_size    - the size of retention ram after enter deep sleep mode.
 *          key_storage_offset - the offset inside flash used to store local IRK, etc.
 *
 * @return  end address of used exchange memory.
 */
uint32_t ble_stack_configure(bool sig_mesh_en,
                               uint8_t con_num,
                               uint8_t rx_buf_num,
                               uint16_t rx_buf_size,
                               uint8_t tx_buf_num,
                               uint16_t tx_buf_size,
                               uint16_t max_adv_size,
                               uint16_t ret_ram_size,
                               uint32_t key_storage_offset);

/*********************************************************************
 * @fn      ble_set_coded_phy_sel
 *
 * @brief   used to set coded PHY selection, 125K or 500K.
 *
 * @param   addr        - ble address
 *          addr_type   - ble address type, @ref ble_addr_type, this function
 *          should be called before stack initialization.
 *
 * @return  None.
 */
void ble_set_coded_phy_sel(enum ble_coded_phy_sel_t sel);

/*********************************************************************
 * @fn      low_power_save
 *
 * @brief   used to save BLE stack state before enter sleep mode.
 *
 * @param   None.
 *
 * @return  None.
 */
void low_power_save(void);

/*********************************************************************
 * @fn      ble_stack_rf_init
 *
 * @brief   used to restore BLE stack state after wake up from sleep mode.
 *
 * @param   None.
 *
 * @return  None.
 */
void low_power_restore(void);

#endif // BLE_STACK_ENTRY_H_

